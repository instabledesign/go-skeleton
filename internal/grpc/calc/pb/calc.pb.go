// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calc.proto

package calc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MyRequest_Type int32

const (
	MyRequest_ADDITION       MyRequest_Type = 0
	MyRequest_SUBSTRACTION   MyRequest_Type = 1
	MyRequest_MULTIPLICATION MyRequest_Type = 2
	MyRequest_DIVISION       MyRequest_Type = 3
)

var MyRequest_Type_name = map[int32]string{
	0: "ADDITION",
	1: "SUBSTRACTION",
	2: "MULTIPLICATION",
	3: "DIVISION",
}
var MyRequest_Type_value = map[string]int32{
	"ADDITION":       0,
	"SUBSTRACTION":   1,
	"MULTIPLICATION": 2,
	"DIVISION":       3,
}

func (x MyRequest_Type) String() string {
	return proto.EnumName(MyRequest_Type_name, int32(x))
}
func (MyRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_calc_7db2bfddff651cf6, []int{0, 0}
}

type MyRequest struct {
	Type                 MyRequest_Type `protobuf:"varint,1,opt,name=type,proto3,enum=calc.MyRequest_Type" json:"type,omitempty"`
	OperandeA            int64          `protobuf:"varint,2,opt,name=operandeA,proto3" json:"operandeA,omitempty"`
	OperandeB            int64          `protobuf:"varint,3,opt,name=operandeB,proto3" json:"operandeB,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MyRequest) Reset()         { *m = MyRequest{} }
func (m *MyRequest) String() string { return proto.CompactTextString(m) }
func (*MyRequest) ProtoMessage()    {}
func (*MyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_calc_7db2bfddff651cf6, []int{0}
}
func (m *MyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MyRequest.Unmarshal(m, b)
}
func (m *MyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MyRequest.Marshal(b, m, deterministic)
}
func (dst *MyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyRequest.Merge(dst, src)
}
func (m *MyRequest) XXX_Size() int {
	return xxx_messageInfo_MyRequest.Size(m)
}
func (m *MyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MyRequest proto.InternalMessageInfo

func (m *MyRequest) GetType() MyRequest_Type {
	if m != nil {
		return m.Type
	}
	return MyRequest_ADDITION
}

func (m *MyRequest) GetOperandeA() int64 {
	if m != nil {
		return m.OperandeA
	}
	return 0
}

func (m *MyRequest) GetOperandeB() int64 {
	if m != nil {
		return m.OperandeB
	}
	return 0
}

type MyResponse struct {
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MyResponse) Reset()         { *m = MyResponse{} }
func (m *MyResponse) String() string { return proto.CompactTextString(m) }
func (*MyResponse) ProtoMessage()    {}
func (*MyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_calc_7db2bfddff651cf6, []int{1}
}
func (m *MyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MyResponse.Unmarshal(m, b)
}
func (m *MyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MyResponse.Marshal(b, m, deterministic)
}
func (dst *MyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyResponse.Merge(dst, src)
}
func (m *MyResponse) XXX_Size() int {
	return xxx_messageInfo_MyResponse.Size(m)
}
func (m *MyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MyResponse proto.InternalMessageInfo

func (m *MyResponse) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*MyRequest)(nil), "calc.MyRequest")
	proto.RegisterType((*MyResponse)(nil), "calc.MyResponse")
	proto.RegisterEnum("calc.MyRequest_Type", MyRequest_Type_name, MyRequest_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalcClient is the client API for Calc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalcClient interface {
	Operation(ctx context.Context, in *MyRequest, opts ...grpc.CallOption) (*MyResponse, error)
}

type calcClient struct {
	cc *grpc.ClientConn
}

func NewCalcClient(cc *grpc.ClientConn) CalcClient {
	return &calcClient{cc}
}

func (c *calcClient) Operation(ctx context.Context, in *MyRequest, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/calc.Calc/Operation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalcServer is the server API for Calc service.
type CalcServer interface {
	Operation(context.Context, *MyRequest) (*MyResponse, error)
}

func RegisterCalcServer(s *grpc.Server, srv CalcServer) {
	s.RegisterService(&_Calc_serviceDesc, srv)
}

func _Calc_Operation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServer).Operation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calc.Calc/Operation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServer).Operation(ctx, req.(*MyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calc.Calc",
	HandlerType: (*CalcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Operation",
			Handler:    _Calc_Operation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calc.proto",
}

func init() { proto.RegisterFile("calc.proto", fileDescriptor_calc_7db2bfddff651cf6) }

var fileDescriptor_calc_7db2bfddff651cf6 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4e, 0xcc, 0x49,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x76, 0x33, 0x72, 0x71, 0xfa,
	0x56, 0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x69, 0x70, 0xb1, 0x94, 0x54, 0x16, 0xa4,
	0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x19, 0x89, 0xe8, 0x81, 0x95, 0xc3, 0xa5, 0xf5, 0x42, 0x2a,
	0x0b, 0x52, 0x83, 0xc0, 0x2a, 0x84, 0x64, 0xb8, 0x38, 0xf3, 0x0b, 0x52, 0x8b, 0x12, 0xf3, 0x52,
	0x52, 0x1d, 0x25, 0x98, 0x14, 0x18, 0x35, 0x98, 0x83, 0x10, 0x02, 0xc8, 0xb2, 0x4e, 0x12, 0xcc,
	0xa8, 0xb2, 0x4e, 0x4a, 0x1e, 0x5c, 0x2c, 0x20, 0x93, 0x84, 0x78, 0xb8, 0x38, 0x1c, 0x5d, 0x5c,
	0x3c, 0x43, 0x3c, 0xfd, 0xfd, 0x04, 0x18, 0x84, 0x04, 0xb8, 0x78, 0x82, 0x43, 0x9d, 0x82, 0x43,
	0x82, 0x1c, 0x9d, 0xc1, 0x22, 0x8c, 0x42, 0x42, 0x5c, 0x7c, 0xbe, 0xa1, 0x3e, 0x21, 0x9e, 0x01,
	0x3e, 0x9e, 0xce, 0x8e, 0x60, 0x31, 0x26, 0x90, 0x1e, 0x17, 0xcf, 0x30, 0xcf, 0x60, 0x10, 0x8f,
	0x59, 0x49, 0x85, 0x8b, 0x0b, 0xe4, 0xba, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x31, 0x2e,
	0xb6, 0xa2, 0xd4, 0xe2, 0xd2, 0x9c, 0x12, 0xb0, 0xfb, 0x99, 0x83, 0xa0, 0x3c, 0x23, 0x0b, 0x2e,
	0x16, 0xe7, 0xc4, 0x9c, 0x64, 0x21, 0x03, 0x2e, 0x4e, 0x7f, 0x90, 0x23, 0x4a, 0x32, 0xf3, 0xf3,
	0x84, 0xf8, 0xd1, 0x3c, 0x27, 0x25, 0x80, 0x10, 0x80, 0x98, 0xa7, 0xc4, 0x90, 0xc4, 0x06, 0x0e,
	0x2a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x75, 0xf1, 0xdb, 0x38, 0x01, 0x00, 0x00,
}
